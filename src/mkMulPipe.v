//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Nov 12 01:47:22 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_send                       O     1 const
// receive_fst                    O     1 reg
// RDY_receive_fst                O     1 const
// receive_snd_fst                O    11 reg
// RDY_receive_snd_fst            O     1 const
// receive_snd_snd_fst            O   104 reg
// RDY_receive_snd_snd_fst        O     1 const
// receive_snd_snd_snd            O     6 reg
// RDY_receive_snd_snd_snd        O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// send_data_in                   I   128 reg
// EN_send                        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMulPipe(CLK,
		 RST_N,

		 send_data_in,
		 EN_send,
		 RDY_send,

		 receive_fst,
		 RDY_receive_fst,

		 receive_snd_fst,
		 RDY_receive_snd_fst,

		 receive_snd_snd_fst,
		 RDY_receive_snd_snd_fst,

		 receive_snd_snd_snd,
		 RDY_receive_snd_snd_snd);
  input  CLK;
  input  RST_N;

  // action method send
  input  [127 : 0] send_data_in;
  input  EN_send;
  output RDY_send;

  // value method receive_fst
  output receive_fst;
  output RDY_receive_fst;

  // value method receive_snd_fst
  output [10 : 0] receive_snd_fst;
  output RDY_receive_snd_fst;

  // value method receive_snd_snd_fst
  output [103 : 0] receive_snd_snd_fst;
  output RDY_receive_snd_snd_fst;

  // value method receive_snd_snd_snd
  output [5 : 0] receive_snd_snd_snd;
  output RDY_receive_snd_snd_snd;

  // signals for module outputs
  wire [103 : 0] receive_snd_snd_fst;
  wire [10 : 0] receive_snd_fst;
  wire [5 : 0] receive_snd_snd_snd;
  wire RDY_receive_fst,
       RDY_receive_snd_fst,
       RDY_receive_snd_snd_fst,
       RDY_receive_snd_snd_snd,
       RDY_send,
       receive_fst;

  // register d_copy1
  reg [127 : 0] d_copy1;
  wire [127 : 0] d_copy1$D_IN;
  wire d_copy1$EN;

  // register d_copy10
  reg [127 : 0] d_copy10;
  wire [127 : 0] d_copy10$D_IN;
  wire d_copy10$EN;

  // register d_copy11
  reg [127 : 0] d_copy11;
  wire [127 : 0] d_copy11$D_IN;
  wire d_copy11$EN;

  // register d_copy2
  reg [127 : 0] d_copy2;
  wire [127 : 0] d_copy2$D_IN;
  wire d_copy2$EN;

  // register d_copy3
  reg [127 : 0] d_copy3;
  wire [127 : 0] d_copy3$D_IN;
  wire d_copy3$EN;

  // register d_copy4
  reg [127 : 0] d_copy4;
  wire [127 : 0] d_copy4$D_IN;
  wire d_copy4$EN;

  // register d_copy5
  reg [127 : 0] d_copy5;
  wire [127 : 0] d_copy5$D_IN;
  wire d_copy5$EN;

  // register d_copy6
  reg [127 : 0] d_copy6;
  wire [127 : 0] d_copy6$D_IN;
  wire d_copy6$EN;

  // register d_copy7
  reg [127 : 0] d_copy7;
  wire [127 : 0] d_copy7$D_IN;
  wire d_copy7$EN;

  // register d_copy8
  reg [127 : 0] d_copy8;
  wire [127 : 0] d_copy8$D_IN;
  wire d_copy8$EN;

  // register d_copy9
  reg [127 : 0] d_copy9;
  wire [127 : 0] d_copy9$D_IN;
  wire d_copy9$EN;

  // register rg_er
  reg [12 : 0] rg_er;
  wire [12 : 0] rg_er$D_IN;
  wire rg_er$EN;

  // register rg_ers2
  reg [12 : 0] rg_ers2;
  wire [12 : 0] rg_ers2$D_IN;
  wire rg_ers2$EN;

  // register rg_ers3
  reg [12 : 0] rg_ers3;
  wire [12 : 0] rg_ers3$D_IN;
  wire rg_ers3$EN;

  // register rg_ex
  reg [12 : 0] rg_ex;
  reg [12 : 0] rg_ex$D_IN;
  wire rg_ex$EN;

  // register rg_ex_f
  reg [10 : 0] rg_ex_f;
  wire [10 : 0] rg_ex_f$D_IN;
  wire rg_ex_f$EN;

  // register rg_flags_f
  reg [5 : 0] rg_flags_f;
  wire [5 : 0] rg_flags_f$D_IN;
  wire rg_flags_f$EN;

  // register rg_flags_s1
  reg [5 : 0] rg_flags_s1;
  wire [5 : 0] rg_flags_s1$D_IN;
  wire rg_flags_s1$EN;

  // register rg_flags_s2
  reg [5 : 0] rg_flags_s2;
  wire [5 : 0] rg_flags_s2$D_IN;
  wire rg_flags_s2$EN;

  // register rg_flags_s3
  reg [5 : 0] rg_flags_s3;
  wire [5 : 0] rg_flags_s3$D_IN;
  wire rg_flags_s3$EN;

  // register rg_flags_s4
  reg [5 : 0] rg_flags_s4;
  wire [5 : 0] rg_flags_s4$D_IN;
  wire rg_flags_s4$EN;

  // register rg_man
  reg [107 : 0] rg_man;
  wire [107 : 0] rg_man$D_IN;
  wire rg_man$EN;

  // register rg_man_f
  reg [103 : 0] rg_man_f;
  wire [103 : 0] rg_man_f$D_IN;
  wire rg_man_f$EN;

  // register rg_partial_product0_1
  reg [107 : 0] rg_partial_product0_1;
  wire [107 : 0] rg_partial_product0_1$D_IN;
  wire rg_partial_product0_1$EN;

  // register rg_partial_product1_1
  reg [107 : 0] rg_partial_product1_1;
  wire [107 : 0] rg_partial_product1_1$D_IN;
  wire rg_partial_product1_1$EN;

  // register rg_partial_product2_1
  reg [107 : 0] rg_partial_product2_1;
  wire [107 : 0] rg_partial_product2_1$D_IN;
  wire rg_partial_product2_1$EN;

  // register rg_partial_product3_1
  reg [107 : 0] rg_partial_product3_1;
  wire [107 : 0] rg_partial_product3_1$D_IN;
  wire rg_partial_product3_1$EN;

  // register rg_partial_product4_1
  reg [107 : 0] rg_partial_product4_1;
  wire [107 : 0] rg_partial_product4_1$D_IN;
  wire rg_partial_product4_1$EN;

  // register rg_partial_product5_1
  reg [107 : 0] rg_partial_product5_1;
  wire [107 : 0] rg_partial_product5_1$D_IN;
  wire rg_partial_product5_1$EN;

  // register rg_partial_product6_1
  reg [107 : 0] rg_partial_product6_1;
  wire [107 : 0] rg_partial_product6_1$D_IN;
  wire rg_partial_product6_1$EN;

  // register rg_partial_product7_1
  reg [107 : 0] rg_partial_product7_1;
  wire [107 : 0] rg_partial_product7_1$D_IN;
  wire rg_partial_product7_1$EN;

  // register rg_partial_product8_1
  reg [107 : 0] rg_partial_product8_1;
  wire [107 : 0] rg_partial_product8_1$D_IN;
  wire rg_partial_product8_1$EN;

  // register rg_sign
  reg rg_sign;
  wire rg_sign$D_IN, rg_sign$EN;

  // register rg_sign_f
  reg rg_sign_f;
  wire rg_sign_f$D_IN, rg_sign_f$EN;

  // register rg_smr
  reg [107 : 0] rg_smr;
  wire [107 : 0] rg_smr$D_IN;
  wire rg_smr$EN;

  // register rg_smr1
  reg [107 : 0] rg_smr1;
  wire [107 : 0] rg_smr1$D_IN;
  wire rg_smr1$EN;

  // register rg_smr2
  reg [107 : 0] rg_smr2;
  wire [107 : 0] rg_smr2$D_IN;
  wire rg_smr2$EN;

  // register rg_smr3
  reg [107 : 0] rg_smr3;
  wire [107 : 0] rg_smr3$D_IN;
  wire rg_smr3$EN;

  // register rg_sr
  reg rg_sr;
  wire rg_sr$D_IN, rg_sr$EN;

  // register rg_srs2
  reg rg_srs2;
  wire rg_srs2$D_IN, rg_srs2$EN;

  // register rg_srs3
  reg rg_srs3;
  wire rg_srs3$D_IN, rg_srs3$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_add_stage2,
       CAN_FIRE_RL_rl_eval_exponent_sign_stage1,
       CAN_FIRE_RL_rl_eval_partial_product_1_stage1,
       CAN_FIRE_RL_rl_stage2o5,
       CAN_FIRE_RL_rl_stage3,
       CAN_FIRE_RL_rl_stage5,
       CAN_FIRE_send,
       WILL_FIRE_RL_rl_add_stage2,
       WILL_FIRE_RL_rl_eval_exponent_sign_stage1,
       WILL_FIRE_RL_rl_eval_partial_product_1_stage1,
       WILL_FIRE_RL_rl_stage2o5,
       WILL_FIRE_RL_rl_stage3,
       WILL_FIRE_RL_rl_stage5,
       WILL_FIRE_send;

  // remaining internal signals
  wire [107 : 0] x__h4187, x__h4246, x__h4305, x__h4544;
  wire [103 : 0] IF_rg_ex_55_BITS_12_TO_11_56_EQ_0b1_57_OR_rg_e_ETC___d277,
		 IF_rg_ex_55_ULE_0x1FCC_63_THEN_IF_rg_ex_55_BIT_ETC___d276;
  wire [59 : 0] a__h1670,
		res1__h1677,
		res1__h1942,
		res1__h2199,
		res1__h2455,
		res1__h2711,
		res1__h2967,
		res1__h3223,
		res1__h3479,
		res1__h3711,
		res2__h1678,
		res2__h1943,
		res2__h2200,
		res2__h2456,
		res2__h2712,
		res2__h2968,
		res2__h3224,
		res2__h3480,
		res2__h3712,
		res3__h1679,
		res3__h1944,
		res3__h2201,
		res3__h2457,
		res3__h2713,
		res3__h2969,
		res3__h3225,
		res3__h3481,
		res3__h3713,
		res4__h1680,
		res4__h1945,
		res4__h2202,
		res4__h2458,
		res4__h2714,
		res4__h2970,
		res4__h3226,
		res4__h3482,
		res4__h3714,
		res5__h1681,
		res5__h1946,
		res5__h2203,
		res5__h2459,
		res5__h2715,
		res5__h2971,
		res5__h3227,
		res5__h3483,
		res5__h3715,
		res6__h1682,
		res6__h1947,
		res6__h2204,
		res6__h2460,
		res6__h2716,
		res6__h2972,
		res6__h3228,
		res6__h3484,
		x__h1702,
		x__h1703,
		x__h1704,
		x__h1705,
		x__h1967,
		x__h1968,
		x__h1969,
		x__h1970,
		x__h2224,
		x__h2225,
		x__h2226,
		x__h2227,
		x__h2480,
		x__h2481,
		x__h2482,
		x__h2483,
		x__h2736,
		x__h2737,
		x__h2738,
		x__h2739,
		x__h2992,
		x__h2993,
		x__h2994,
		x__h2995,
		x__h3248,
		x__h3249,
		x__h3250,
		x__h3251,
		x__h3504,
		x__h3505,
		x__h3506,
		x__h3507,
		x__h3737,
		x__h3738,
		x__h3739,
		y__h1683,
		y__h1948,
		y__h2205,
		y__h2461,
		y__h2717,
		y__h2973,
		y__h3229,
		y__h3485,
		y__h3717;
  wire [52 : 0] m__h1667;
  wire [12 : 0] x__h5069, x__h800, x__h802, y__h803;
  wire [10 : 0] IF_rg_flags_s4_51_BIT_0_53_THEN_0x0_ELSE_IF_rg_ETC___d269;
  wire [5 : 0] IF_d_copy2_BITS_126_TO_116_EQ_0_AND_d_copy2_BI_ETC__q1,
	       IF_rg_ex_55_ULE_0x1FCC_63_THEN_IF_rg_ex_55_BIT_ETC___d281,
	       IF_rg_flags_s4_51_BIT_0_53_THEN_0b1_ELSE_IF_rg_ETC___d284;
  wire rg_ex_55_ULE_0x1FCC___d263;

  // action method send
  assign RDY_send = 1'd1 ;
  assign CAN_FIRE_send = 1'd1 ;
  assign WILL_FIRE_send = EN_send ;

  // value method receive_fst
  assign receive_fst = rg_sign_f ;
  assign RDY_receive_fst = 1'd1 ;

  // value method receive_snd_fst
  assign receive_snd_fst = rg_ex_f ;
  assign RDY_receive_snd_fst = 1'd1 ;

  // value method receive_snd_snd_fst
  assign receive_snd_snd_fst = rg_man_f ;
  assign RDY_receive_snd_snd_fst = 1'd1 ;

  // value method receive_snd_snd_snd
  assign receive_snd_snd_snd = rg_flags_f ;
  assign RDY_receive_snd_snd_snd = 1'd1 ;

  // rule RL_rl_stage5
  assign CAN_FIRE_RL_rl_stage5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_stage5 = 1'd1 ;

  // rule RL_rl_stage3
  assign CAN_FIRE_RL_rl_stage3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_stage3 = 1'd1 ;

  // rule RL_rl_stage2o5
  assign CAN_FIRE_RL_rl_stage2o5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_stage2o5 = 1'd1 ;

  // rule RL_rl_add_stage2
  assign CAN_FIRE_RL_rl_add_stage2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_add_stage2 = 1'd1 ;

  // rule RL_rl_eval_exponent_sign_stage1
  assign CAN_FIRE_RL_rl_eval_exponent_sign_stage1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_eval_exponent_sign_stage1 = 1'd1 ;

  // rule RL_rl_eval_partial_product_1_stage1
  assign CAN_FIRE_RL_rl_eval_partial_product_1_stage1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_eval_partial_product_1_stage1 = 1'd1 ;

  // register d_copy1
  assign d_copy1$D_IN = send_data_in ;
  assign d_copy1$EN = EN_send ;

  // register d_copy10
  assign d_copy10$D_IN = 128'h0 ;
  assign d_copy10$EN = 1'b0 ;

  // register d_copy11
  assign d_copy11$D_IN = 128'h0 ;
  assign d_copy11$EN = 1'b0 ;

  // register d_copy2
  assign d_copy2$D_IN = send_data_in ;
  assign d_copy2$EN = EN_send ;

  // register d_copy3
  assign d_copy3$D_IN = 128'h0 ;
  assign d_copy3$EN = 1'b0 ;

  // register d_copy4
  assign d_copy4$D_IN = 128'h0 ;
  assign d_copy4$EN = 1'b0 ;

  // register d_copy5
  assign d_copy5$D_IN = 128'h0 ;
  assign d_copy5$EN = 1'b0 ;

  // register d_copy6
  assign d_copy6$D_IN = 128'h0 ;
  assign d_copy6$EN = 1'b0 ;

  // register d_copy7
  assign d_copy7$D_IN = 128'h0 ;
  assign d_copy7$EN = 1'b0 ;

  // register d_copy8
  assign d_copy8$D_IN = 128'h0 ;
  assign d_copy8$EN = 1'b0 ;

  // register d_copy9
  assign d_copy9$D_IN = 128'h0 ;
  assign d_copy9$EN = 1'b0 ;

  // register rg_er
  assign rg_er$D_IN = x__h800 + 13'd7169 ;
  assign rg_er$EN = 1'd1 ;

  // register rg_ers2
  assign rg_ers2$D_IN = rg_er ;
  assign rg_ers2$EN = 1'd1 ;

  // register rg_ers3
  assign rg_ers3$D_IN = rg_ers2 ;
  assign rg_ers3$EN = 1'd1 ;

  // register rg_ex
  always@(rg_smr or x__h5069 or rg_ers3)
  begin
    case (rg_smr[105:104])
      2'b0, 2'b01: rg_ex$D_IN = rg_ers3;
      default: rg_ex$D_IN = x__h5069;
    endcase
  end
  assign rg_ex$EN = 1'b1 ;

  // register rg_ex_f
  assign rg_ex_f$D_IN =
	     rg_flags_s4[2] ?
	       11'h7FF :
	       IF_rg_flags_s4_51_BIT_0_53_THEN_0x0_ELSE_IF_rg_ETC___d269 ;
  assign rg_ex_f$EN = 1'd1 ;

  // register rg_flags_f
  assign rg_flags_f$D_IN =
	     rg_flags_s4[2] ?
	       6'b000100 :
	       IF_rg_flags_s4_51_BIT_0_53_THEN_0b1_ELSE_IF_rg_ETC___d284 ;
  assign rg_flags_f$EN = 1'd1 ;

  // register rg_flags_s1
  assign rg_flags_s1$D_IN =
	     { 3'd0,
	       d_copy2[126:116] == 11'd2047 && d_copy2[115:64] != 52'd0 ||
	       d_copy2[62:52] == 11'd2047 && d_copy2[51:0] != 52'd0,
	       d_copy2[126:116] == 11'd2047 && d_copy2[115:64] == 52'd0 ||
	       d_copy2[62:52] == 11'd2047 && d_copy2[51:0] == 52'd0,
	       IF_d_copy2_BITS_126_TO_116_EQ_0_AND_d_copy2_BI_ETC__q1[0] } ;
  assign rg_flags_s1$EN = 1'd1 ;

  // register rg_flags_s2
  assign rg_flags_s2$D_IN = rg_flags_s1 ;
  assign rg_flags_s2$EN = 1'd1 ;

  // register rg_flags_s3
  assign rg_flags_s3$D_IN = rg_flags_s2 ;
  assign rg_flags_s3$EN = 1'd1 ;

  // register rg_flags_s4
  assign rg_flags_s4$D_IN = rg_flags_s3 ;
  assign rg_flags_s4$EN = 1'd1 ;

  // register rg_man
  assign rg_man$D_IN =
	     (rg_smr[105:104] == 2'b0) ?
	       rg_smr :
	       { 4'b0,
		 (rg_smr[105:104] == 2'b01) ?
		   rg_smr[103:0] :
		   rg_smr[104:1] } ;
  assign rg_man$EN = 1'b1 ;

  // register rg_man_f
  assign rg_man_f$D_IN =
	     rg_flags_s4[2] ?
	       104'h00000000000000FFFFFFFFFFFF :
	       ((rg_flags_s4[0] || rg_flags_s4[1]) ?
		  104'h0 :
		  IF_rg_ex_55_BITS_12_TO_11_56_EQ_0b1_57_OR_rg_e_ETC___d277) ;
  assign rg_man_f$EN = 1'd1 ;

  // register rg_partial_product0_1
  assign rg_partial_product0_1$D_IN = { 48'd0, y__h1683 } ;
  assign rg_partial_product0_1$EN = 1'd1 ;

  // register rg_partial_product1_1
  assign rg_partial_product1_1$D_IN = { 42'd0, y__h1948, 6'd0 } ;
  assign rg_partial_product1_1$EN = 1'd1 ;

  // register rg_partial_product2_1
  assign rg_partial_product2_1$D_IN = { 36'd0, y__h2205, 12'd0 } ;
  assign rg_partial_product2_1$EN = 1'd1 ;

  // register rg_partial_product3_1
  assign rg_partial_product3_1$D_IN = { 30'd0, y__h2461, 18'd0 } ;
  assign rg_partial_product3_1$EN = 1'd1 ;

  // register rg_partial_product4_1
  assign rg_partial_product4_1$D_IN = { 24'd0, y__h2717, 24'd0 } ;
  assign rg_partial_product4_1$EN = 1'd1 ;

  // register rg_partial_product5_1
  assign rg_partial_product5_1$D_IN = { 18'd0, y__h2973, 30'd0 } ;
  assign rg_partial_product5_1$EN = 1'd1 ;

  // register rg_partial_product6_1
  assign rg_partial_product6_1$D_IN = { 12'd0, y__h3229, 36'd0 } ;
  assign rg_partial_product6_1$EN = 1'd1 ;

  // register rg_partial_product7_1
  assign rg_partial_product7_1$D_IN = { 6'd0, y__h3485, 42'd0 } ;
  assign rg_partial_product7_1$EN = 1'd1 ;

  // register rg_partial_product8_1
  assign rg_partial_product8_1$D_IN = { y__h3717, 48'd0 } ;
  assign rg_partial_product8_1$EN = 1'd1 ;

  // register rg_sign
  assign rg_sign$D_IN = rg_srs3 ;
  assign rg_sign$EN = 1'd1 ;

  // register rg_sign_f
  assign rg_sign_f$D_IN = rg_sign ;
  assign rg_sign_f$EN = 1'd1 ;

  // register rg_smr
  assign rg_smr$D_IN = x__h4544 + rg_smr3 ;
  assign rg_smr$EN = 1'd1 ;

  // register rg_smr1
  assign rg_smr1$D_IN = x__h4187 + rg_partial_product2_1 ;
  assign rg_smr1$EN = 1'd1 ;

  // register rg_smr2
  assign rg_smr2$D_IN = x__h4246 + rg_partial_product5_1 ;
  assign rg_smr2$EN = 1'd1 ;

  // register rg_smr3
  assign rg_smr3$D_IN = x__h4305 + rg_partial_product8_1 ;
  assign rg_smr3$EN = 1'd1 ;

  // register rg_sr
  assign rg_sr$D_IN = d_copy1[127] != d_copy1[63] ;
  assign rg_sr$EN = 1'd1 ;

  // register rg_srs2
  assign rg_srs2$D_IN = rg_sr ;
  assign rg_srs2$EN = 1'd1 ;

  // register rg_srs3
  assign rg_srs3$D_IN = rg_srs2 ;
  assign rg_srs3$EN = 1'd1 ;

  // remaining internal signals
  assign IF_d_copy2_BITS_126_TO_116_EQ_0_AND_d_copy2_BI_ETC__q1 =
	     (d_copy2[126:116] == 11'd0 && d_copy2[115:64] == 52'd0 ||
	      d_copy2[62:52] == 11'd0 && d_copy2[51:0] == 52'd0) ?
	       6'd1 :
	       6'd0 ;
  assign IF_rg_ex_55_BITS_12_TO_11_56_EQ_0b1_57_OR_rg_e_ETC___d277 =
	     (rg_ex[12:11] == 2'b01 ||
	      rg_ex[12:11] == 2'b0 && rg_ex[10:0] == 11'd2047) ?
	       rg_man[104:1] :
	       IF_rg_ex_55_ULE_0x1FCC_63_THEN_IF_rg_ex_55_BIT_ETC___d276 ;
  assign IF_rg_ex_55_ULE_0x1FCC_63_THEN_IF_rg_ex_55_BIT_ETC___d276 =
	     rg_ex_55_ULE_0x1FCC___d263 ?
	       (rg_ex[12] ? 104'h00000000000000000000000001 : rg_man[103:0]) :
	       rg_man[104:1] ;
  assign IF_rg_ex_55_ULE_0x1FCC_63_THEN_IF_rg_ex_55_BIT_ETC___d281 =
	     rg_ex_55_ULE_0x1FCC___d263 ?
	       (rg_ex[12] ? 6'b001000 : rg_flags_s4) :
	       6'b100000 ;
  assign IF_rg_flags_s4_51_BIT_0_53_THEN_0b1_ELSE_IF_rg_ETC___d284 =
	     rg_flags_s4[0] ?
	       6'b000001 :
	       (rg_flags_s4[1] ?
		  6'b000010 :
		  ((rg_ex[12:11] == 2'b01 ||
		    rg_ex[12:11] == 2'b0 && rg_ex[10:0] == 11'd2047) ?
		     6'b010000 :
		     IF_rg_ex_55_ULE_0x1FCC_63_THEN_IF_rg_ex_55_BIT_ETC___d281)) ;
  assign IF_rg_flags_s4_51_BIT_0_53_THEN_0x0_ELSE_IF_rg_ETC___d269 =
	     rg_flags_s4[0] ?
	       11'h0 :
	       (rg_flags_s4[1] ?
		  11'h7FF :
		  ((rg_ex[12:11] == 2'b01 ||
		    rg_ex[12:11] == 2'b0 && rg_ex[10:0] == 11'd2047) ?
		     11'h7FE :
		     (rg_ex_55_ULE_0x1FCC___d263 ?
			(rg_ex[12] ? 11'h0 : rg_ex[10:0]) :
			11'h0))) ;
  assign a__h1670 = { 7'd0, m__h1667 } ;
  assign m__h1667 = { d_copy2[126:116] != 11'd0, d_copy2[115:64] } ;
  assign res1__h1677 = d_copy2[0] ? a__h1670 : 60'd0 ;
  assign res1__h1942 = d_copy2[6] ? a__h1670 : 60'd0 ;
  assign res1__h2199 = d_copy2[12] ? a__h1670 : 60'd0 ;
  assign res1__h2455 = d_copy2[18] ? a__h1670 : 60'd0 ;
  assign res1__h2711 = d_copy2[24] ? a__h1670 : 60'd0 ;
  assign res1__h2967 = d_copy2[30] ? a__h1670 : 60'd0 ;
  assign res1__h3223 = d_copy2[36] ? a__h1670 : 60'd0 ;
  assign res1__h3479 = d_copy2[42] ? a__h1670 : 60'd0 ;
  assign res1__h3711 = d_copy2[48] ? a__h1670 : 60'd0 ;
  assign res2__h1678 = d_copy2[1] ? { 6'd0, m__h1667, 1'd0 } : 60'd0 ;
  assign res2__h1943 = d_copy2[7] ? { 6'd0, m__h1667, 1'd0 } : 60'd0 ;
  assign res2__h2200 = d_copy2[13] ? { 6'd0, m__h1667, 1'd0 } : 60'd0 ;
  assign res2__h2456 = d_copy2[19] ? { 6'd0, m__h1667, 1'd0 } : 60'd0 ;
  assign res2__h2712 = d_copy2[25] ? { 6'd0, m__h1667, 1'd0 } : 60'd0 ;
  assign res2__h2968 = d_copy2[31] ? { 6'd0, m__h1667, 1'd0 } : 60'd0 ;
  assign res2__h3224 = d_copy2[37] ? { 6'd0, m__h1667, 1'd0 } : 60'd0 ;
  assign res2__h3480 = d_copy2[43] ? { 6'd0, m__h1667, 1'd0 } : 60'd0 ;
  assign res2__h3712 = d_copy2[49] ? { 6'd0, m__h1667, 1'd0 } : 60'd0 ;
  assign res3__h1679 = d_copy2[2] ? { 5'd0, m__h1667, 2'd0 } : 60'd0 ;
  assign res3__h1944 = d_copy2[8] ? { 5'd0, m__h1667, 2'd0 } : 60'd0 ;
  assign res3__h2201 = d_copy2[14] ? { 5'd0, m__h1667, 2'd0 } : 60'd0 ;
  assign res3__h2457 = d_copy2[20] ? { 5'd0, m__h1667, 2'd0 } : 60'd0 ;
  assign res3__h2713 = d_copy2[26] ? { 5'd0, m__h1667, 2'd0 } : 60'd0 ;
  assign res3__h2969 = d_copy2[32] ? { 5'd0, m__h1667, 2'd0 } : 60'd0 ;
  assign res3__h3225 = d_copy2[38] ? { 5'd0, m__h1667, 2'd0 } : 60'd0 ;
  assign res3__h3481 = d_copy2[44] ? { 5'd0, m__h1667, 2'd0 } : 60'd0 ;
  assign res3__h3713 = d_copy2[50] ? { 5'd0, m__h1667, 2'd0 } : 60'd0 ;
  assign res4__h1680 = d_copy2[3] ? { 4'd0, m__h1667, 3'd0 } : 60'd0 ;
  assign res4__h1945 = d_copy2[9] ? { 4'd0, m__h1667, 3'd0 } : 60'd0 ;
  assign res4__h2202 = d_copy2[15] ? { 4'd0, m__h1667, 3'd0 } : 60'd0 ;
  assign res4__h2458 = d_copy2[21] ? { 4'd0, m__h1667, 3'd0 } : 60'd0 ;
  assign res4__h2714 = d_copy2[27] ? { 4'd0, m__h1667, 3'd0 } : 60'd0 ;
  assign res4__h2970 = d_copy2[33] ? { 4'd0, m__h1667, 3'd0 } : 60'd0 ;
  assign res4__h3226 = d_copy2[39] ? { 4'd0, m__h1667, 3'd0 } : 60'd0 ;
  assign res4__h3482 = d_copy2[45] ? { 4'd0, m__h1667, 3'd0 } : 60'd0 ;
  assign res4__h3714 = d_copy2[51] ? { 4'd0, m__h1667, 3'd0 } : 60'd0 ;
  assign res5__h1681 = d_copy2[4] ? { 3'd0, m__h1667, 4'd0 } : 60'd0 ;
  assign res5__h1946 = d_copy2[10] ? { 3'd0, m__h1667, 4'd0 } : 60'd0 ;
  assign res5__h2203 = d_copy2[16] ? { 3'd0, m__h1667, 4'd0 } : 60'd0 ;
  assign res5__h2459 = d_copy2[22] ? { 3'd0, m__h1667, 4'd0 } : 60'd0 ;
  assign res5__h2715 = d_copy2[28] ? { 3'd0, m__h1667, 4'd0 } : 60'd0 ;
  assign res5__h2971 = d_copy2[34] ? { 3'd0, m__h1667, 4'd0 } : 60'd0 ;
  assign res5__h3227 = d_copy2[40] ? { 3'd0, m__h1667, 4'd0 } : 60'd0 ;
  assign res5__h3483 = d_copy2[46] ? { 3'd0, m__h1667, 4'd0 } : 60'd0 ;
  assign res5__h3715 =
	     (d_copy2[62:52] == 11'd0) ? 60'd0 : { 3'd0, m__h1667, 4'd0 } ;
  assign res6__h1682 = d_copy2[5] ? { 2'd0, m__h1667, 5'd0 } : 60'd0 ;
  assign res6__h1947 = d_copy2[11] ? { 2'd0, m__h1667, 5'd0 } : 60'd0 ;
  assign res6__h2204 = d_copy2[17] ? { 2'd0, m__h1667, 5'd0 } : 60'd0 ;
  assign res6__h2460 = d_copy2[23] ? { 2'd0, m__h1667, 5'd0 } : 60'd0 ;
  assign res6__h2716 = d_copy2[29] ? { 2'd0, m__h1667, 5'd0 } : 60'd0 ;
  assign res6__h2972 = d_copy2[35] ? { 2'd0, m__h1667, 5'd0 } : 60'd0 ;
  assign res6__h3228 = d_copy2[41] ? { 2'd0, m__h1667, 5'd0 } : 60'd0 ;
  assign res6__h3484 = d_copy2[47] ? { 2'd0, m__h1667, 5'd0 } : 60'd0 ;
  assign rg_ex_55_ULE_0x1FCC___d263 = rg_ex <= 13'h1FCC ;
  assign x__h1702 = x__h1703 + res5__h1681 ;
  assign x__h1703 = x__h1704 + res4__h1680 ;
  assign x__h1704 = x__h1705 + res3__h1679 ;
  assign x__h1705 = res1__h1677 + res2__h1678 ;
  assign x__h1967 = x__h1968 + res5__h1946 ;
  assign x__h1968 = x__h1969 + res4__h1945 ;
  assign x__h1969 = x__h1970 + res3__h1944 ;
  assign x__h1970 = res1__h1942 + res2__h1943 ;
  assign x__h2224 = x__h2225 + res5__h2203 ;
  assign x__h2225 = x__h2226 + res4__h2202 ;
  assign x__h2226 = x__h2227 + res3__h2201 ;
  assign x__h2227 = res1__h2199 + res2__h2200 ;
  assign x__h2480 = x__h2481 + res5__h2459 ;
  assign x__h2481 = x__h2482 + res4__h2458 ;
  assign x__h2482 = x__h2483 + res3__h2457 ;
  assign x__h2483 = res1__h2455 + res2__h2456 ;
  assign x__h2736 = x__h2737 + res5__h2715 ;
  assign x__h2737 = x__h2738 + res4__h2714 ;
  assign x__h2738 = x__h2739 + res3__h2713 ;
  assign x__h2739 = res1__h2711 + res2__h2712 ;
  assign x__h2992 = x__h2993 + res5__h2971 ;
  assign x__h2993 = x__h2994 + res4__h2970 ;
  assign x__h2994 = x__h2995 + res3__h2969 ;
  assign x__h2995 = res1__h2967 + res2__h2968 ;
  assign x__h3248 = x__h3249 + res5__h3227 ;
  assign x__h3249 = x__h3250 + res4__h3226 ;
  assign x__h3250 = x__h3251 + res3__h3225 ;
  assign x__h3251 = res1__h3223 + res2__h3224 ;
  assign x__h3504 = x__h3505 + res5__h3483 ;
  assign x__h3505 = x__h3506 + res4__h3482 ;
  assign x__h3506 = x__h3507 + res3__h3481 ;
  assign x__h3507 = res1__h3479 + res2__h3480 ;
  assign x__h3737 = x__h3738 + res4__h3714 ;
  assign x__h3738 = x__h3739 + res3__h3713 ;
  assign x__h3739 = res1__h3711 + res2__h3712 ;
  assign x__h4187 = rg_partial_product0_1 + rg_partial_product1_1 ;
  assign x__h4246 = rg_partial_product3_1 + rg_partial_product4_1 ;
  assign x__h4305 = rg_partial_product6_1 + rg_partial_product7_1 ;
  assign x__h4544 = rg_smr1 + rg_smr2 ;
  assign x__h5069 = rg_ers3 + 13'd1 ;
  assign x__h800 = x__h802 + y__h803 ;
  assign x__h802 = { 2'd0, d_copy1[126:116] } ;
  assign y__h1683 = x__h1702 + res6__h1682 ;
  assign y__h1948 = x__h1967 + res6__h1947 ;
  assign y__h2205 = x__h2224 + res6__h2204 ;
  assign y__h2461 = x__h2480 + res6__h2460 ;
  assign y__h2717 = x__h2736 + res6__h2716 ;
  assign y__h2973 = x__h2992 + res6__h2972 ;
  assign y__h3229 = x__h3248 + res6__h3228 ;
  assign y__h3485 = x__h3504 + res6__h3484 ;
  assign y__h3717 = x__h3737 + res5__h3715 ;
  assign y__h803 = { 2'd0, d_copy1[62:52] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        d_copy1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	d_copy10 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	d_copy11 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	d_copy2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	d_copy3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	d_copy4 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	d_copy5 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	d_copy6 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	d_copy7 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	d_copy8 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	d_copy9 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_er <= `BSV_ASSIGNMENT_DELAY 13'd0;
	rg_ers2 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	rg_ers3 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	rg_ex <= `BSV_ASSIGNMENT_DELAY 13'd0;
	rg_ex_f <= `BSV_ASSIGNMENT_DELAY 11'd0;
	rg_flags_f <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_flags_s1 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_flags_s2 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_flags_s3 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_flags_s4 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_man <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_man_f <= `BSV_ASSIGNMENT_DELAY 104'd0;
	rg_partial_product0_1 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product1_1 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product2_1 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product3_1 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product4_1 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product5_1 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product6_1 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product7_1 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product8_1 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_sign <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sign_f <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_smr <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_smr1 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_smr2 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_smr3 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_sr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_srs2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_srs3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (d_copy1$EN) d_copy1 <= `BSV_ASSIGNMENT_DELAY d_copy1$D_IN;
	if (d_copy10$EN) d_copy10 <= `BSV_ASSIGNMENT_DELAY d_copy10$D_IN;
	if (d_copy11$EN) d_copy11 <= `BSV_ASSIGNMENT_DELAY d_copy11$D_IN;
	if (d_copy2$EN) d_copy2 <= `BSV_ASSIGNMENT_DELAY d_copy2$D_IN;
	if (d_copy3$EN) d_copy3 <= `BSV_ASSIGNMENT_DELAY d_copy3$D_IN;
	if (d_copy4$EN) d_copy4 <= `BSV_ASSIGNMENT_DELAY d_copy4$D_IN;
	if (d_copy5$EN) d_copy5 <= `BSV_ASSIGNMENT_DELAY d_copy5$D_IN;
	if (d_copy6$EN) d_copy6 <= `BSV_ASSIGNMENT_DELAY d_copy6$D_IN;
	if (d_copy7$EN) d_copy7 <= `BSV_ASSIGNMENT_DELAY d_copy7$D_IN;
	if (d_copy8$EN) d_copy8 <= `BSV_ASSIGNMENT_DELAY d_copy8$D_IN;
	if (d_copy9$EN) d_copy9 <= `BSV_ASSIGNMENT_DELAY d_copy9$D_IN;
	if (rg_er$EN) rg_er <= `BSV_ASSIGNMENT_DELAY rg_er$D_IN;
	if (rg_ers2$EN) rg_ers2 <= `BSV_ASSIGNMENT_DELAY rg_ers2$D_IN;
	if (rg_ers3$EN) rg_ers3 <= `BSV_ASSIGNMENT_DELAY rg_ers3$D_IN;
	if (rg_ex$EN) rg_ex <= `BSV_ASSIGNMENT_DELAY rg_ex$D_IN;
	if (rg_ex_f$EN) rg_ex_f <= `BSV_ASSIGNMENT_DELAY rg_ex_f$D_IN;
	if (rg_flags_f$EN)
	  rg_flags_f <= `BSV_ASSIGNMENT_DELAY rg_flags_f$D_IN;
	if (rg_flags_s1$EN)
	  rg_flags_s1 <= `BSV_ASSIGNMENT_DELAY rg_flags_s1$D_IN;
	if (rg_flags_s2$EN)
	  rg_flags_s2 <= `BSV_ASSIGNMENT_DELAY rg_flags_s2$D_IN;
	if (rg_flags_s3$EN)
	  rg_flags_s3 <= `BSV_ASSIGNMENT_DELAY rg_flags_s3$D_IN;
	if (rg_flags_s4$EN)
	  rg_flags_s4 <= `BSV_ASSIGNMENT_DELAY rg_flags_s4$D_IN;
	if (rg_man$EN) rg_man <= `BSV_ASSIGNMENT_DELAY rg_man$D_IN;
	if (rg_man_f$EN) rg_man_f <= `BSV_ASSIGNMENT_DELAY rg_man_f$D_IN;
	if (rg_partial_product0_1$EN)
	  rg_partial_product0_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product0_1$D_IN;
	if (rg_partial_product1_1$EN)
	  rg_partial_product1_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product1_1$D_IN;
	if (rg_partial_product2_1$EN)
	  rg_partial_product2_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product2_1$D_IN;
	if (rg_partial_product3_1$EN)
	  rg_partial_product3_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product3_1$D_IN;
	if (rg_partial_product4_1$EN)
	  rg_partial_product4_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product4_1$D_IN;
	if (rg_partial_product5_1$EN)
	  rg_partial_product5_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product5_1$D_IN;
	if (rg_partial_product6_1$EN)
	  rg_partial_product6_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product6_1$D_IN;
	if (rg_partial_product7_1$EN)
	  rg_partial_product7_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product7_1$D_IN;
	if (rg_partial_product8_1$EN)
	  rg_partial_product8_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product8_1$D_IN;
	if (rg_sign$EN) rg_sign <= `BSV_ASSIGNMENT_DELAY rg_sign$D_IN;
	if (rg_sign_f$EN) rg_sign_f <= `BSV_ASSIGNMENT_DELAY rg_sign_f$D_IN;
	if (rg_smr$EN) rg_smr <= `BSV_ASSIGNMENT_DELAY rg_smr$D_IN;
	if (rg_smr1$EN) rg_smr1 <= `BSV_ASSIGNMENT_DELAY rg_smr1$D_IN;
	if (rg_smr2$EN) rg_smr2 <= `BSV_ASSIGNMENT_DELAY rg_smr2$D_IN;
	if (rg_smr3$EN) rg_smr3 <= `BSV_ASSIGNMENT_DELAY rg_smr3$D_IN;
	if (rg_sr$EN) rg_sr <= `BSV_ASSIGNMENT_DELAY rg_sr$D_IN;
	if (rg_srs2$EN) rg_srs2 <= `BSV_ASSIGNMENT_DELAY rg_srs2$D_IN;
	if (rg_srs3$EN) rg_srs3 <= `BSV_ASSIGNMENT_DELAY rg_srs3$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    d_copy1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_copy10 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_copy11 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_copy2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_copy3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_copy4 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_copy5 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_copy6 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_copy7 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_copy8 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d_copy9 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_er = 13'h0AAA;
    rg_ers2 = 13'h0AAA;
    rg_ers3 = 13'h0AAA;
    rg_ex = 13'h0AAA;
    rg_ex_f = 11'h2AA;
    rg_flags_f = 6'h2A;
    rg_flags_s1 = 6'h2A;
    rg_flags_s2 = 6'h2A;
    rg_flags_s3 = 6'h2A;
    rg_flags_s4 = 6'h2A;
    rg_man = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_man_f = 104'hAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product0_1 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product1_1 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product2_1 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product3_1 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product4_1 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product5_1 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product6_1 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product7_1 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product8_1 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_sign = 1'h0;
    rg_sign_f = 1'h0;
    rg_smr = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_smr1 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_smr2 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_smr3 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_sr = 1'h0;
    rg_srs2 = 1'h0;
    rg_srs3 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMulPipe

